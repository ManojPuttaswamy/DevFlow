generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String?
  lastName  String?
  
  // Enhanced profile fields
  bio         String?
  avatar      String?   // URL to avatar image
  title       String?   // e.g., "Full Stack Developer"
  company     String?
  location    String?
  website     String?
  
  // Social links
  githubUrl    String?
  linkedinUrl  String?
  twitterUrl   String?
  portfolioUrl String?
  
  // Skills and experience
  skills       String[]  // Array of skills
  experience   String?   // Years of experience
  availability String?   // Available for work, freelance, etc.
  
  // Authentication
  password  String
  verified  Boolean  @default(false)
  
  // Profile completion and activity
  profileViews Int @default(0)
  lastActive   DateTime @default(now())
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  projects     Project[]
  reviewsGiven Review[] @relation("ReviewerReviews")
  reviewsReceived Review[] @relation("AuthorReviews")
  
  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  
  // Project details
  longDescription String?   // Detailed project description
  features        String[]  // Array of key features
  challenges      String?   // Challenges faced and solutions
  learnings       String?   // What was learned from this project
  
  // URLs and media
  githubUrl    String?
  liveUrl      String?
  videoUrl     String?      // Demo video URL
  images       String[]     // Array of image URLs
  
  // Technical details
  technologies String[]     // Tech stack
  category     String?      // Web App, Mobile App, API, etc.
  status       ProjectStatus @default(IN_PROGRESS)
  
  // GitHub integration
  githubRepo     String?    // owner/repo format
  githubStars    Int?       @default(0)
  githubForks    Int?       @default(0)
  githubLanguage String?    // Primary language from GitHub
  lastCommit     DateTime?  // Last commit date
  
  // Engagement
  views          Int        @default(0)
  likes          Int        @default(0)
  featured       Boolean    @default(false)
  
  // Relations
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reviews     Review[]
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("projects")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?
  status      ReviewStatus @default(PENDING)
  
  // Detailed review fields
  codeQuality    Int?    // 1-5 rating
  documentation  Int?    // 1-5 rating
  userExperience Int?    // 1-5 rating
  innovation     Int?    // 1-5 rating
  
  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  reviewerId  String
  reviewer    User     @relation("ReviewerReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  
  authorId    String   // Project author
  author      User     @relation("AuthorReviews", fields: [authorId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([projectId, reviewerId])
  @@map("reviews")
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  MAINTENANCE
  ARCHIVED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
}